#!/bin/sh
set -eu

# Quickstart:
# > sudo void-installer
# > sudo poweroff
# > sudo xbps-install --sync xbps curl
# > curl -#LO https://git.io/void-firstboot
# > sh void-firstboot [OPTIONS]   2>&1 | tee -a void-firstboot.log
# > curl https://wesaugur.sh | sh 2>&1 | tee -a dotfiles-install.log
# > chsh -s /bin/fish
# > logout
# > dotfiles-fixup
# > dim_fish_prompt
# > void-repo-mirror-setup
# > sudo reboot

# Libreboot BIOS + GPT Partitions:
# - 1M      BIOS Boot           no-fs
# - 2xRAM  Linux Swap           swap
# - 32G+   Linux Root (<arch>)  xfs
# - %FREE  Linux Home           xfs

# Libreboot X200:
# - "DMAR: Failed to map dmar2" is a non-critical warning
#   Fix (optional): GRUB kernel boot parameter "intremap=off"
# - "Machine Check: Processor context corrupt" kernel panic
#   Fix: Install Intel microcode package (intel-ucode) from nonfree repo
#        https://docs.voidlinux.org/config/firmware.html#intel

# SSD Reset:
# > sudo hdparm -I /dev/$DEVICE
# > sudo hdparm --security-set-pass $PASSWORD /dev/$DEVICE
# > sudo hdparm --security-erase-enhanced $PASSWORD /dev/$DEVICE

# Disk Wiping:
# > sudo dd if=/dev/urandom of=/dev/$DEVICE status=progress bs=1M

# Full Disk Encryption - https://docs.voidlinux.org/installation/guides/fde.html
#                      - https://docs.voidlinux.org/installation/guides/chroot.html
# > lsblk
# > export DEVICE=<DEVICE>(sda)
# > export PARTITION=<PARTITION>(sda2)
# > export LVM_LABEL=<HOSTNAME>(x200)
# > sudo cfdisk [--zero] /dev/$DEVICE
#   BIOS + GPT Partitions:
#   - 1M     BIOS Boot  no-fs
#   - %FREE  Linux LVM
# > sudo cryptsetup luksFormat [--type=luks1] /dev/$PARTITION
# > sudo cryptsetup open /dev/$PARTITION luks-$LVM_LABEL
# > sudo pvcreate /dev/mapper/luks-$LVM_LABEL
# > sudo vgcreate vg_$LVM_LABEL /dev/mapper/luks-$LVM_LABEL
# > sudo lvcreate --name=swap -L <2xRAM>  vg_$LVM_LABEL
# > sudo lvcreate --name=root -L <32G+>   vg_$LVM_LABEL
# > sudo lvcreate --name=home -l 100%FREE vg_$LVM_LABEL
# Libreboot (hardcoded LVM names):
# > sudo vgrename vg_$LVM_LABEL matrix
# > sudo lvrename /dev/matrix/root /dev/matrix/rootvol
# --
# > sudo void-installer
#   Source: Network
#   Bootloader: None
#   Partition: Skip
#   Filesystems: Use vg_$LVM_LABEL-<LV_LABEL> with fstype:none
#   Reboot: No
# > sudo mount /dev/vg_$LVM_LABEL/root /mnt
# > for dir in dev proc sys ; do sudo mount --rbind /$dir /mnt/$dir --make-rslave ; done
# > sudo chroot /mnt bash
# Re-export {DEVICE,PARTITION,LVM_LABEL}
# # echo GRUB_ENABLE_CRYPTODISK=y >> /etc/default/grub
# Add "rd.auto" to /etc/default/grub:GRUB_CMDLINE_LINUX_DEFAULT
#  OR "rd.luks.uuid=<UUID-prefix>" where <UUID> is:
#   > blkid /dev/$PARTITION -s UUID -o value
# LUKS Keyfile (optional):
# # dd bs=1 count=64 if=/dev/random of=/boot/luks-$LVM_LABEL.key
# # cryptsetup luksAddKey /dev/$PARTITION /boot/luks-$LVM_LABEL.key
# # chmod 0000 /boot/luks-$LVM_LABEL.key
# # chmod -R g=,o= /boot
# # echo "luks-$LVM_LABEL  /dev/$PARTITION  /boot/luks-$LVM_LABEL.key" >> /etc/crypttab
# # echo "install_items+=\" /boot/luks-$LVM_LABEL.key /etc/crypttab \"" >> \
#           /etc/dracut.conf.d/10-crypt.conf
# --
# # grub-install /dev/$DEVICE
# # xbps-reconfigure --force --all
# # exit
# > sudo umount -R /mnt
# > sudo poweroff


usage() {
    printf 'usage: %s [-U (no-usb)] [-F (nonfree)]\n' "$0"
    exit 3
}

no_usb=false
nonfree=false

while getopts hUF opt; do
    case $opt in
        h|\?)  usage ;;
        U)  no_usb=true ;;
        F)  nonfree=true ;;
    esac
done
shift $((OPTIND-1))

xbps_install() {
    sudo xbps-install --yes "$@"
}

set -x

if [ $nonfree = true ]; then
    xbps_install void-repo-nonfree
fi

# Update
xbps_install --sync xbps
xbps_install --sync --update

# Git
xbps_install git

# XBPS tools
xbps_install xtools

# USB firewall
xbps_install usbguard
sudo mkdir -p -m 0700 /etc/usbguard/IPCAccessControl.d  # TODO REMOVE: Dir missing from package
# sudo usbguard add-user --group wheel --devices=ALL --policy=list --exceptions=ALL
usbguard generate-policy | sudo tee /etc/usbguard/rules.conf
sudo ln -s /etc/sv/usbguard /var/service/ || [ $? -eq 1 ]

# Network firewall
# xbps_install nftables runit-nftables
xbps_install ufw
sudo ufw allow ssh
sudo ufw enable
sudo ln -s /etc/sv/ufw /var/service/ || [ $? -eq 1 ]

# OpenSSH daemon
sudo ln -s /etc/sv/sshd /var/service/ || [ $? -eq 1 ]

# NTP alternative
xbps_install chrony
sudo ln -s /etc/sv/chronyd /var/service/ || [ $? -eq 1 ]

# cron alternative
xbps_install snooze

# SSD TRIM
sudo mkdir -p /etc/cron.weekly
sudo tee /etc/cron.weekly/fstrim <<-EOF > /dev/null
	#!/bin/sh

	fstrim --fstab
EOF
sudo chmod +x /etc/cron.weekly/fstrim

# GRUB
## UX
sudo sed -i '/GRUB_BACKGROUND/s|^#||' /etc/default/grub
sudo sed -i '/GRUB_TIMEOUT/s|=[0-9]\+|=1|' /etc/default/grub
## USB authorize internal devices only
usb_auth='usbcore.authorized_default=2'
if [ $no_usb = true ]; then
    grep $usb_auth /etc/default/grub || \
            sudo sed -i "/GRUB_CMDLINE_LINUX_DEFAULT/s|\"$| $usb_auth&|" /etc/default/grub
fi
sudo update-grub

# Keymap
# sudo sed -i '/KEYMAP/s|=us|="us ctrl"|' /etc/rc.conf  # Swaps Caps_Lock//Control
grep 's|Caps_Lock|Control|' /etc/rc.local || \
        sudo tee -a /etc/rc.local <<-EOF > /dev/null

	dumpkeys | sed 's|Caps_Lock|Control|' | loadkeys
EOF

set +x
echo "[ $(tput setaf 2)OK$(tput sgr0) ] void-firstboot"
